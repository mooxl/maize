/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as StandupIdImport } from './routes/$standupId'
import { Route as IndexImport } from './routes/index'
import { Route as StandupIdIndexImport } from './routes/$standupId.index'
import { Route as StandupIdUpdateImport } from './routes/$standupId.update'

// Create/Update Routes

const StandupIdRoute = StandupIdImport.update({
  id: '/$standupId',
  path: '/$standupId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StandupIdIndexRoute = StandupIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StandupIdRoute,
} as any)

const StandupIdUpdateRoute = StandupIdUpdateImport.update({
  id: '/update',
  path: '/update',
  getParentRoute: () => StandupIdRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$standupId': {
      id: '/$standupId'
      path: '/$standupId'
      fullPath: '/$standupId'
      preLoaderRoute: typeof StandupIdImport
      parentRoute: typeof rootRoute
    }
    '/$standupId/update': {
      id: '/$standupId/update'
      path: '/update'
      fullPath: '/$standupId/update'
      preLoaderRoute: typeof StandupIdUpdateImport
      parentRoute: typeof StandupIdImport
    }
    '/$standupId/': {
      id: '/$standupId/'
      path: '/'
      fullPath: '/$standupId/'
      preLoaderRoute: typeof StandupIdIndexImport
      parentRoute: typeof StandupIdImport
    }
  }
}

// Create and export the route tree

interface StandupIdRouteChildren {
  StandupIdUpdateRoute: typeof StandupIdUpdateRoute
  StandupIdIndexRoute: typeof StandupIdIndexRoute
}

const StandupIdRouteChildren: StandupIdRouteChildren = {
  StandupIdUpdateRoute: StandupIdUpdateRoute,
  StandupIdIndexRoute: StandupIdIndexRoute,
}

const StandupIdRouteWithChildren = StandupIdRoute._addFileChildren(
  StandupIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$standupId': typeof StandupIdRouteWithChildren
  '/$standupId/update': typeof StandupIdUpdateRoute
  '/$standupId/': typeof StandupIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$standupId/update': typeof StandupIdUpdateRoute
  '/$standupId': typeof StandupIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$standupId': typeof StandupIdRouteWithChildren
  '/$standupId/update': typeof StandupIdUpdateRoute
  '/$standupId/': typeof StandupIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$standupId' | '/$standupId/update' | '/$standupId/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$standupId/update' | '/$standupId'
  id: '__root__' | '/' | '/$standupId' | '/$standupId/update' | '/$standupId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  StandupIdRoute: typeof StandupIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  StandupIdRoute: StandupIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$standupId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$standupId": {
      "filePath": "$standupId.tsx",
      "children": [
        "/$standupId/update",
        "/$standupId/"
      ]
    },
    "/$standupId/update": {
      "filePath": "$standupId.update.tsx",
      "parent": "/$standupId"
    },
    "/$standupId/": {
      "filePath": "$standupId.index.tsx",
      "parent": "/$standupId"
    }
  }
}
ROUTE_MANIFEST_END */
